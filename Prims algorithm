#include <bits/stdc++.h>
#define LL          long long int
#define ULL         unsigned long long int
#define pb          push_back
#define ppb         pop_back
#define PI          acos(-1.0)
#define ff          first
#define ss          second
#define mkp         make_pair
//#define mod         131071

#define FOR(I,A,B)  for(int I = (A); I < (B); ++I)
#define REP(I,N)    FOR(I,0,N)
#define ALL(A)      ((A).begin(), (A).end())
#define s(a)        scanf("%d",&a)
#define p(a)        printf("%d",a)
#define pf          printf
#define pln         printf("\n")
#define IO          freopen("input.txt","r",stdin)

#define pii pair<int,int>

using namespace std;

/// cost[][] , v adjacent node
int prims(int n,int start,vector<int> v[],vector<int> cost[]) {
    // Complete this function

    priority_queue<pii> traker;

    traker.push(mkp(0,start));
    int totalcost = 0;
    int visit[n+1] = {0};

    while(!traker.empty()){

        pii temp = traker.top(); traker.pop();

        if(visit[temp.ss] != 1){
            totalcost+=-temp.ff;
            visit[temp.ss] = 1;
//            cout<< temp.ff<<" "<<temp.ss <<endl;
            int sz = v[temp.ss].size();
            for ( int i = 0 ; i < sz ; i++ ){
//                cout<< v[temp.ss][i] <<" "<< cost[temp.ss][v[temp.ss][i]] <<endl;
                if(visit[v[temp.ss][i]] !=1 ){
                    traker.push(mkp(-cost[temp.ss][i],v[temp.ss][i]));
                }
            }

        }
    }
    return totalcost;
}

int main() {
    int n;
    int m;
    cin >> n >> m;
    vector< vector<int> > edges(m,vector<int>(3));
    int start;

    for(int edges_i = 0;edges_i < m;edges_i++){
       for(int edges_j = 0;edges_j < 3;edges_j++){
          cin >> edges[edges_i][edges_j];
       }
    }
    cin>>start;

    vector<int> cost[n+1];
    vector<int> v[n+1];

    int sz = edges.size();
    for ( int i = 0 ; i < sz ; i++ ){
        v[edges[i][0]].pb(edges[i][1]);
        v[edges[i][1]].pb(edges[i][0]);
        cost[edges[i][0]].pb(edges[i][2]);
        cost[edges[i][1]].pb(edges[i][2]);
    }


    int result = prims(n,start,v,cost);
    cout << result << endl;
    return 0;
}
